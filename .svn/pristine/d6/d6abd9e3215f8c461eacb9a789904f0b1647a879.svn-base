@import './function.scss';
@import './var.scss';

/*
 flex box wrap
 */
@mixin flex($dir: column, $justify: flex-start, $align: flex-start, $wrap: nowrap){
  display: flex;
  flex-direction: $dir;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

/*
 * scroll-bar
 */

@mixin scroll-bar{
  $--scrollbar-thumb-background: #b4bccc;
  $--scrollbar-track-background: #fff;

  &::-webkit-scrollbar {
    z-index: 11;
    width: 6px;

    &:horizontal {
      height: 6px;
    }

    &-thumb {
      border-radius: 5px;
      width: 6px;
      background: $--scrollbar-thumb-background;
    }
    &-corner {
      background: $--scrollbar-track-background;
    }
    &-track {
      background: $--scrollbar-track-background;

      &-piece {
        background: $--scrollbar-track-background;
        width: 6px;
      }
    }
  }
}



/*
 * BEM
 */
@mixin b($block) {
  $B: $namespace + '-' + $block !global;
  .#{$B} {
    @content;
  }
}

@mixin e($element) {
  $E: $element !global;
  $selector: &;

  @if containModifier($selector) {
    @at-root {
      #{$selector} {
        .#{$B + $el-separator + $E} {
          @content;
        }
      }
    }
  }@else {
    @at-root {
      #{$selector + $el-separator + $element} {
        @content;
      }
    }
  } 
}


@mixin m($modifier) {
  $selector: &;
  @at-root {
    #{$selector + $mo-separator + $modifier} {
      @content ;
    }
  }
}


@mixin when($state) {
  $selector: &;
  @at-root {
    #{$selector}.#{$state-prefix + $state} {
      @content;
    }
  }
}

@mixin pseudo($pseudo) {
  @at-root #{&}#{':#{$pseudo}'} {
    @content;
  }
}
