<template>
    <section class='my-page-pay'>
        <my-card-schema
            v-for="(item, index) in CardList"
            :key="index">
            <my-card-location 
                v-if="index < 2" 
                ref="myChild" 
                :list="CardList[index]" 
                :type="index"
                :form-obj="form_order">
            </my-card-location>
            <my-card-goods-info
                ref="myChild" 
                v-else 
                :list="CardList[index]"
                :classify="classifyList"
                :form-obj="form_order"
                >
            </my-card-goods-info>
        </my-card-schema>

        <my-card-schema mult>
            <my-order-schema>
                <my-order-item
                 @submitEvent="handleClickSubmit"
                 @nextEvent="handleClickNext" 
                 :additional="additional"
                 :totalMoney="totalMoney"
                 :imgCode="imgCode"
                 :canShowPayBox="SHOW_PAY_BOX">
                </my-order-item>
            </my-order-schema>
            <section class="my-pp-card__rg">
                <div style="width: 600px; height: 400px;" id="amap"></div>
            </section>
        </my-card-schema>
        <!-- <section class="my-pp-card my-pp-card-500">
            <section class="my-pp-card__lf">
                <ul class="my-form-list">
                    <li class="my-form-item">
                        <span class="my-form-item__label">订单距离</span>
                        <span>
                            <strong class="is-danger">{{additional}}</strong>
                            公里
                        </span>
                    </li>
                     <li class="my-form-item">
                        <span class="my-form-item__label">订单总额</span>
                        <span>
                            <strong class="is-danger">{{totalMoney || 0}}</strong>
                            元
                        </span>
                    </li>
                    <template v-if="!SHOW_PAY_BOX">
                        <li class="my-form-item">
                            <span class="my-form-item__label">下单手机号</span>
                            <el-input v-model="form_signin.phone" placeholder="请输入下单手机号"></el-input>
                        </li>
                        <li class="my-form-item my-form-item__flex">
                            <span class="my-form-item__label">验证码</span>
                            <el-input v-model="form_signin.code" placeholder="请编辑验证码"></el-input>
                            <el-popover
                                class="my-popover-box"
                                width="160"
                                v-model="isShowPopover"
                                >
                                <section class="my-popover-box">
                                    <el-input v-model="form_signin.captcha" placeholer="请编辑验证码" />
                                    <div class="my-img-code-box">
                                        <img 
                                        @click="GetImgCode"
                                        :src="imgCode.path" alt="code">
                                    </div>
                                </section>
                                <div style="text-align: right; margin: 0; margin-top:15px;">
                                    <el-button size="danger" type="mini" @click="isShowPopover = false">取消</el-button>
                                    <el-button 
                                        type="primary" 
                                        size="mini" 
                                        @click="handleClickPostMsg"
                                    >确定</el-button>
                                </div>
                                <el-button slot="reference" 
                                    @click="handleClickToggle" 
                                    class="my-form-item__btn"
                                    :loading="isShowBtnLoading">
                                        <span v-if="!isShowBtnLoading">获取验证码</span>
                                        <span v-else>{{timer_count}}s之后再获取</span>
                                    </el-button>
                            </el-popover>
                        </li>
                        <li class="my-form-item">
                            <el-button 
                                @click="handleClickNext"
                                type="primary"
                                class="my-form-item__btn--submit" 
                                size="middle">下一步</el-button>
                        </li>
                    </template>
                    <template v-else>
                        <li class="my-form-item">
                            <span class="my-form-item__label">优惠券</span>
                            <el-select
                                v-model="form_order.coupon_id">
                                <el-option 
                                    v-for="(ii, ild) in couponList"
                                    :key="ild"
                                    :label="ii.info"
                                    :value="ii.id"></el-option>
                            </el-select>
                        </li>
                        <li class="my-form-item">
                            <span class="my-form-item__label">支付方式</span>
                            <section class="my-radiobox-group">
                                <span 
                                    @click="handleRadioChange(0)" 
                                    class="my-radiobox-group__item"
                                    :class="[
                                        {'is-pay-group-active': temp_pay_type == 'zhifubao'}
                                    ]"></span>
                                <span 
                                    @click="handleRadioChange(1)" 
                                    class="my-radiobox-group__item"
                                    :class="[
                                        {'is-pay-group-active': temp_pay_type == 'weixin'}
                                    ]"></span>
                            </section>
                        </li>
                        <li class="my-form-item">
                            <el-button 
                             class="my-form-item__btn--submit"
                             @click="handleClickSubmit"
                             type="primary"
                             size="middle">立即下单</el-button>
                        </li>
                    </template>
                </ul>
            </section>
            <section class="my-pp-card__rg">
                <div style="width: 600px; height: 400px;" id="amap"></div>
            </section>
        </section> -->
        <el-dialog 
            :visible.sync="visibleDialog"
            :before-close="dialogBeforeClose"
            title="微信支付"
            >
            <section class="my-dialog__header">
                <p class="my-dialog__header--title">支付金额 
                    <span class="my-dialog__header--money is-danger">{{totalMoney}}</span>
                </p>
                <p class="my-dialog__header--tips">{{dialog_count}}s之后自动关闭</p>
            </section>
            <section class="my-qrbox">
                <section id="qrcode"></section>
            </section>
            <section class="my-img-box">
                <img src="../../assets/imgs/weixin.png" alt="">
            </section>
        </el-dialog>
    </section>
</template>

<script>
 const SHOW_PAY_BOX = false
 import {mapState, mapMutations, mapActions, mapGetters} from 'vuex'
 import MapService from  'wqr-amap'
 import {Toast, getLocalItem, setLocalItem} from '@/utils/global'
 import QRCode from 'qrcodejs2'

 import CardList from './cardList'
 import MyCardLocation from '@/views/indexManage/child/cardLocation'
 import MyCardGoodsInfo from '@/views/indexManage/child/cardInfo'
 import MyCardSchema from '@/views/indexManage/schema/card'
 import MyOrderSchema from '@/views/indexManage/schema/orderSchema'
 import MyOrderItem from '@/views/indexManage/child/orderItem' 

 export default{
    name: 'OrderIndex',
    components: {
        MyCardLocation,
        MyCardGoodsInfo,
        MyCardSchema,
        MyOrderSchema,
        MyOrderItem
    },
    provide: {
        Toast: Toast
    },
    props: {},
    watch: {},
    computed: {
        ...mapState({
            classifyList: state => state.Index.classifyList,
            isShowImgBox: state => state.Index.canShowImgBox,
            imgCode: state => state.Index.imgCode,
            orderInfo: state => state.Index.orderInfo,
            couponList: state => state.Index.couponList,
            formResultStatus: state => state.Index.result
        }),
        totalMoney(){ // 计算总的价格
            let {compute_fee, distance_fee, distance_start_fee, night_fee, bridge_fee} = this.orderInfo
            let item = this.couponList && this.couponList.find(kk => kk.id == this.form_order.coupon_id)  
                        && this.couponList.find(kk => kk.id == this.form_order.coupon_id).reduce_money
            item = item ? item : 0
            let result = compute_fee + distance_fee + distance_start_fee + night_fee + bridge_fee - item
            return result && result.toFixed(2)
        },
        additional(){ // 计算中的距离
            let {additional_distance} = this.orderInfo
            let result = (additional_distance/1000).toFixed(2)
            return result = isNaN(result) ? 0 : result
        },
        queryPath(){ // alipay 支付回调之后的页面query
            let {out_trade_no} = this.$route.query
            return out_trade_no  ? true : false
        }
    },
    data(){
        return {
            CardList, // 表单的列表
            SHOW_PAY_BOX, // 是否登录状态展示box
            form_signin: { // 登录的对象
                phone: '',
                captcha: '',
                code: ''
            },
            form_order: { // order页的全部对象
                shipper_address: {
                    adcode: '',
                    Ing: '',
                    lat: '',
                    formatted_address: ''
                },
                recipient_address: {
                    adcode: '',
                    Ing: '',
                    lat: '',
                    formatted_address: ''
                },
                weight: 4,
                coupon_id: 0,
                type: 1,
                shipper: '',
                shipper_phone:'',
                recipient: '',
                recipient_phone: '',
                goods_type: ''
            },
            isShowPopover: false, // 打开验证码popover
            isShowBtnLoading: false, // btn的loading状态
            mapService: null, // map instance
            timer_count: 60, // btn状态的倒计时
            dialog_count: 60, // dialog对话框的倒计时关闭
            temp_pay_type: 'zhifubao', // 支付方式
            tokenObj: {}, // 缓存token的localStorage
            qrCode: null, // 二维码的instance
            visibleDialog: false // 微信支付的dialog
        }
    },
    methods: {
        //
        handleClickSubmit(e){
            /**
             * childs中第一个对象是发货对象， 第二个是收货对象
             */
            let childs = this.$refs.myChild
            let [ship, recipients, goods] = childs
            let local = localStorage
            let token = local.getItem('token') ? JSON.parse(local.getItem('token')) : {}
            let local_form_order = local.getItem('local_form_order')
            childs.forEach((kk, kd) => {
                kk.handleSubmit()
            })
            setTimeout(() => {
                let result = this.formResultStatus.every(kk => kk)
                if(result || local_form_order) {
                    let {shipper, shipper_phone, detailed, temp_send} = ship.$data.temp_form
                    let {recipient, recipient_phone, detailed: r_detailed, temp_receive} = recipients.$data.temp_form
                    let {goods_type, weight, note} = goods.$data.temp_form
                    this.form_order = {
                        ...this.form_order,
                        shipper,
                        shipper_phone,
                        recipient,
                        recipient_phone,
                        goods_type,
                        weight,
                        note,
                        type: 1,
                        temp_receive,
                        temp_send,
                        coupon_id: e.form.coupon_id
                    }
                    this.form_order.shipper_address.detailed = detailed
                    this.form_order.recipient_address.detailed = r_detailed
                    local.setItem('local_form_order', JSON.stringify(this.form_order))
                    this.PostOrder({token: token.token, form: this.form_order}).then(res => {
                        local.setItem('local_order_info', JSON.stringify(res))
                        switch (e.payType) {
                                case 'zhifubao':
                                    this.GetAlipay(token.token).then(res => {
                                        const div = document.createElement('div')
                                        div.innerHTML = res
                                        document.body.appendChild(div)
                                        const elem = document.getElementById('alipaysubmit')
                                        elem.submit()
                                        local.setItem('local_form_order', local_form_order)
                                        }).catch(err => {
                                        //Todo 支付宝调取失败
                                    })
                                    break
                                case 'weixin':
                                    this.visibleDialog = true
                                    this.GetWechat(token.token).then(res => {
                                        let timer = null
                                        local.setItem('local_form_order', local_form_order)
                                        if (this.qrCode) {
                                            this.qrCode.clear()
                                            this.qrCode.makeCode(res.code_url)
                                        } else {
                                            setTimeout(() => {
                                                this.qrCode = new QRCode(document.getElementById('qrcode'), {
                                                    width: 260, //图像宽度
                                                    height: 260, //图像高度
                                                    colorDark: '#000000', //前景色
                                                    colorLight: '#ffffff', //背景色
                                                    typeNumber: 4,
                                                    correctLevel: QRCode.CorrectLevel.H
                                                })
                                                this.qrCode.makeCode(res.code_url)
                                        }, 500)
                                        if(timer) clearInterval(timer)
                                        timer = setInterval(() => {
                                            if(this.dialog_count > 0) {
                                                this.dialog_count --
                                            }else {
                                                this.dialog_count = 0
                                                this.visibleDialog = false
                                                clearInterval(timer)
                                            }
                                        }, 1000)
                                        }
                                    }).catch(err => {
                                    //Todo 微信调取失败
                                    })
                                    break
                            }
                    })
                }
            }, 300)
        },
        ...mapActions([
            'GetClassifyList', 
            'GetImgCode', 
            'PostMsgCode', 
            'GetPriceInfo', 
            'PostUserLogin', 
            'GetCouponInfo', 
            'PostOrder',
            'GetAlipay',
            'GetWechat',
            'GetOrderState'
            ]),
        /**按钮 -- 下一步 
         * 先登录 ， 再付款
          */
        handleClickNext(e){
            let childs = this.$refs.myChild
            childs[0].handleSubmit()
            childs[1].handleSubmit()
            setTimeout(() => {
                let result = this.formResultStatus.slice(0,2).every(kk => kk)
                this.PostUserLogin(e.form).then(res => {
                    let local = localStorage
                    local.setItem('token', JSON.stringify(res.data))
                    let {token} = res.data
                    if(result) {
                        this.GetCouponInfo({form: this.form_order, token}).then(res => {
                            this.form_order.coupon_id = this.couponList.slice(0,1)[0].id
                            this.SHOW_PAY_BOX = true
                        }) 
                    }
                })  
            }, 300)
        },
        /**
         * 单击按钮事件 -- 选择物品信息
         */
        handleClickChoose(item){
            this.form_order.goods_type = item.vlaue
            this.$set(this.form_order, 'goods_type', item.value)
        },
        /** 切换popover */
        handleClickToggle(){
            // this.isShowPopover = true
            this.GetImgCode().then(res => {
                this.isShowPopover = true
            })
        },
        /**获取短信验证码 */
        handleClickPostMsg(){
            let timer = null
            if(timer) clearInterval(timer)
            if(!this.form_signin.phone) {
                return Toast({msg: '请输入手机号', type: 'error'})
            }else if(!this.form_signin.captcha) {
                return Taost({msg: '请输入图片验证码', type: 'error'})
            }
            this.PostMsgCode(this.form_signin).then(res => {
                this.isShowPopover = false
                this.isShowBtnLoading = true
                timer = setInterval(() => {
                    if(this.timer_count > 0) {
                        this.timer_count --
                    }else {
                        this.isShowBtnLoading = false
                    }
                }, 1000)
            })
        },

        /**
         * dialog对话框的关闭回调
         */
        dialogBeforeClose(){
            this.visibleDialog = false
        },

        /**
         * 选择具体地址之后发起获取价格的请求
         * 对价格重新赋值
         */
        handleSelect(e, item){
            this.mapService.lngLatToAddress([e.location.lng, e.location.lat]).then(res => {
                let {shipper_address: {lat: slat, lng: slng}, recipient_address: {lat: rlat, lng: rlng}} = this.form_order
                let _obj = {
                    adcode: res.addressComponent.adcode,
                    lng: e.location.lng,
                    lat: e.location.lat,
                    formatted_address:res.formattedAddress
                }
                if(item.field == 'temp_send') {
                    this.form_order.shipper_address = _obj
                    this.mapService.addMarker([_obj.lng, _obj.lat], '起点')
                    this.mapService.setMapCenter([_obj.lng, _obj.lat])
                }else {
                    this.form_order.recipient_address = _obj
                    this.mapService.addMarker([_obj.lng, _obj.lat], '终点')
                }
                let result_shipper = Object.values(this.form_order.shipper_address).some(kk => kk)
                let result_recipient = Object.values(this.form_order.recipient_address).some(kk => kk)
                if(result_shipper && result_recipient) this.GetPriceInfo(this.form_order)
                let position = {
                    one: [this.form_order.shipper_address.lng, this.form_order.shipper_address.lat],
                    two: [this.form_order.recipient_address.lng, this.form_order.recipient_address.lat]
                }
                let distance = this.mapService.caculateDistance(position)
                if(distance < 3000) {
                    this.mapService.setMapZoom(12)
                }else {
                    this.mapService.setMapZoom(10)
                }
            })
        },
        
        /**
         * 付款失败之后, 重新计算价格
         */
        reloadPrice(){
            let _this = this
            let local = localStorage
            let data = local.getItem('local_form_order') && JSON.parse(local.getItem('local_form_order'))
            let ship = data.shipper_address, recipient = data.recipient_address
            let temp_arr = [
                {
                    location: {
                        location: {
                            lng: ship.lng,
                            lat: ship.lat
                        }
                    },
                    item: {
                        field: 'temp_send'
                    }
                },
                {
                    location: {
                        location: {
                            lng: recipient.lng,
                            lat: recipient.lat
                        }
                    },
                    item: {
                        field: 'temp_recipient'
                    }
                },
            ]
            temp_arr.forEach((kk,kd) => {
                this.handleSelect(kk.location, kk.item)
            })
        },

        /**
         * 获取订单状态信息
         */
        getOrderStatus (){
            if(this.queryPath) {
                let info = local.getItem('local_order_info')
                let token = local.getItem('token')
                this.GetOrderState({
                    token: JSON.parse(token).token,
                    order_id: JSON.parse(info).data.order_id
                })
            }
        },
        /**
         * 初始化地图
         */
        mapInit(){
          let obj = {
            id: 'amap',
            key: '802b75ae5abe1bdddc4a67c1c050ad61',
            mapStyle: {
                zoom: 14,
                resizeEnable: true,
                },
            }
            this.mapService = new MapService(obj)
            this.mapService.initMap().then(() => {
                this.mapService.showLocation()   
            })
        }
    },
    created(){
        let local = localStorage, local_form_order = null
        this.tokenObj = local.getItem('token') ? local.getItem('token') : ''
        this.tokenObj = this.tokenObj && JSON.parse(this.tokenObj)
        local_form_order = local.getItem('local_form_order')
        local_form_order = local_form_order && JSON.parse(local_form_order)

        if(local_form_order) {
            this.form_order = {
                ...this.form_order,
                ...local_form_order
            }
        }
        if(this.tokenObj) { // 登录状态重新获取价格
            this.SHOW_PAY_BOX = true
            if(local_form_order) { // 下订单成功的时候, 根据位置去获取价格
                setTimeout(() => {
                    this.reloadPrice()
                }, 1000)
            }
        }else {
            this.SHOW_PAY_BOX = false
        }
        this.GetClassifyList()
        this.mapInit()
        this.getOrderStatus()
        
    },
    mixins: []
 }
</script>

<style scoped lang='scss'>
@import '@/assets/style/mixin.scss';
@import '@/assets/style/color.scss';
@include b(page-pay) {
    width: inherit;
    padding: 20px 0;
    background-color: #F7F5F5;
}
@include b(qrbox) {
    width: 300px;
    height: 300px;
    margin: 0 auto;
    background-color: #fff;
}

@include b(img-box){
    width: 300px;
    margin: 0 auto;
}

@include b(dialog) {
    @include e(header) {
        @include flex($dir: row, $align: center, $justify: flex-end);
        height: 80px;
        @include m(tips) {
            width: 33%;
            text-align: right;
            align-self: flex-start;
        }
        @include m(money) {
            margin-left: 10px;
        }
        @include m(title){
            flex: 1;
            padding-right: 11%;
            text-align: right;
            font-size: 17px;
        }
    }
}
</style>