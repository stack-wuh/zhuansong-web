<template>
    <section class='my-page-pay'>
        <section 
            v-for="(item, index) in CardList"
            :key="index"
            class="my-pp-card"
            :class="'my-pp-card-'+index">
            <ul class="my-form-list">
                <li
                 v-for="(sub, sid) in item"
                 :key="sid"
                 class="my-form-item">
                    <span class="my-form-item__label">{{sub.label}}</span>
                    <template v-if="sub.type == 'inputsearch'">
                        <el-autocomplete
                            style="width: 90%;"
                            v-model="temp_obj[sub.field]"
                            :fetch-suggestions="handleInputChange"
                            :trigger-on-focus="false"
                            @select="(e) => {return handleSelect(e, sub)}">
                        </el-autocomplete>
                    </template>
                    <template v-if="sub.type == 'textarea'">
                        <el-input 
                            v-model="form_order[sub.field]" 
                            class="my-input__textarea" 
                            type="textarea" 
                            rows="3"
                        ></el-input>
                    </template>
                    <template v-if="sub.type == 'checkbox'">
                        <ul class="my-checkbox-group">
                            <li 
                                v-for="(cc, cl) in classifyList"
                                :key="cl"
                                class="my-checkbox-group__item">
                                <span
                                    @click="handleClickChoose(cc)"
                                    :class="[
                                        {
                                            'is-item-active': form_order.goods_type == cc.value
                                        }
                                    ]" 
                                    class="my-checkbox-group__item--btn"
                                    >{{cc.label}}</span>
                            </li>
                        </ul>
                    </template>
                    <template v-else-if="sub.type == 'inputrange'">
                        <el-input-number v-model="form_order.weight" :min="MIN_WEIGHT"></el-input-number>
                        <span class="my-input-number__tips">KG</span>
                    </template>
                    <template v-else-if="sub.type == undefined">
                        <el-input v-model="form_order.shipper_address[sub.field]" :class="sub.class" placeholder="请编辑" v-if="index == 0" ></el-input>
                        <el-input v-model="form_order.recipient_address[sub.field]" :class="sub.class" placeholder="请编辑" v-else-if="index == 1"></el-input>
                    </template>
                </li>
            </ul>
        </section>
        <section class="my-pp-card my-pp-card-500">
            <section class="my-pp-card__lf">
                <ul class="my-form-list">
                    <li class="my-form-item">
                        <span class="my-form-item__label">订单距离</span>
                        <span>
                            <strong class="is-danger">{{additional}}</strong>
                            公里
                        </span>
                    </li>
                     <li class="my-form-item">
                        <span class="my-form-item__label">订单总额</span>
                        <span>
                            <strong class="is-danger">{{totalMoney || 0}}</strong>
                            元
                        </span>
                    </li>
                    <template v-if="!SHOW_PAY_BOX">
                        <li class="my-form-item">
                            <span class="my-form-item__label">下单手机号</span>
                            <el-input v-model="form_signin.phone" placeholder="请输入下单手机号"></el-input>
                        </li>
                        <li class="my-form-item">
                            <span class="my-form-item__label">验证码</span>
                            <el-input v-model="form_signin.code" placeholder="请编辑验证码"></el-input>
                            <el-popover
                    
                                width="160"
                                v-model="isShowPopover"
                                >
                                <section class="my-popover-box">
                                    <el-input v-model="form_signin.captcha" placeholer="请编辑验证码" />
                                    <div class="my-img-code-box">
                                        <img 
                                        @click="GetImgCode"
                                        :src="imgCode.path" alt="code">
                                    </div>
                                </section>
                                <div style="text-align: right; margin: 0">
                                    <el-button size="danger" type="mini" @click="isShowPopover = false">取消</el-button>
                                    <el-button 
                                        type="primary" 
                                        size="mini" 
                                        @click="handleClickPostMsg"
                                    >确定</el-button>
                                </div>
                                <el-button slot="reference" 
                                    @click="handleClickToggle" 
                                    class="my-form-item__btn"
                                    :loading="isShowBtnLoading">
                                        <span v-if="!isShowBtnLoading">获取验证码</span>
                                        <span v-else>{{timer_count}}s之后再获取</span>
                                    </el-button>
                            </el-popover>
                        </li>
                        <li class="my-form-item">
                            <el-button 
                                @click="handleClickNext"
                                type="primary"
                                class="my-form-item__btn--submit" 
                                size="middle">下一步</el-button>
                        </li>
                    </template>
                    <template v-else>
                        <li class="my-form-item">
                            <span class="my-form-item__label">优惠券</span>
                            <el-select
                                v-model="form_order.coupon_id">
                                <el-option 
                                    v-for="(ii, ild) in couponList"
                                    :key="ild"
                                    :label="ii.info"
                                    :value="ii.id"></el-option>
                            </el-select>
                        </li>
                        <li class="my-form-item">
                            <span class="my-form-item__label">支付方式</span>
                            <section class="my-radiobox-group">
                                <span 
                                    @click="handleRadioChange(0)" 
                                    class="my-radiobox-group__item"
                                    :class="[
                                        {'is-pay-group-active': temp_pay_type == 'zhifubao'}
                                    ]"></span>
                                <span 
                                    @click="handleRadioChange(1)" 
                                    class="my-radiobox-group__item"
                                    :class="[
                                        {'is-pay-group-active': temp_pay_type == 'weixin'}
                                    ]"></span>
                            </section>
                        </li>
                        <li class="my-form-item">
                            <el-button 
                             class="my-form-item__btn--submit"
                             @click="handleSubmit"
                             type="primary"
                             size="middle">立即下单</el-button>
                        </li>
                    </template>
                </ul>
            </section>
            <section class="my-pp-card__rg">
                <div style="width: 600px; height: 400px;" id="amap"></div>
            </section>
        </section>
        <el-dialog 
            :visible.sync="visibleDialog"
            :before-close="dialogBeforeClose"
            title="微信支付"
            >
            <section class="my-dialog__header">
                <p class="my-dialog__header--title">支付金额 
                    <span class="my-dialog__header--money is-danger">{{totalMoney}}</span>
                </p>
                <p class="my-dialog__header--tips">{{dialog_count}}s之后自动关闭</p>
            </section>
            <section class="my-qrbox">
                <section id="qrcode"></section>
            </section>
            <section class="my-img-box">
                <img src="../../assets/imgs/weixin.png" alt="">
            </section>
        </el-dialog>
    </section>
</template>

<script>
 const MIN_WEIGHT = 4 // 运送的最低重量
 const CardList = [  // 表单列表
     [
        {
            label: '发货地址',
            type: 'inputsearch',
            field: 'temp_send'
        },
        {
            label: '详细地址',
            field: 'detailed',
            class: 'my-input__220'
        },
        {
            label: '发货人',
            field: 'shipper',
            class: 'my-input__220'
        },
        {
            label: '联系电话',
            class: 'my-input__220',
            field: 'shipper_phone'
        }
     ],
     [
         {
             label: '收货地址',
             type: 'inputsearch',
             field: 'temp_receive'
         },
         {
             label: '详细地址',
             class: 'my-input__220',
             field: 'detailed'
         },
         {
             label: '收货人',
             field: 'recipient',
             class: 'my-input__220' 
         },
         {
             label: '联系电话',
             class: 'my-input__220',
             field: 'recipient_phone' 
         }
     ],
     [
         {
             label: '物品信息',
             type: 'checkbox',
             field: 'goods_type'
         },
         {
             label: '重量',
             type: 'inputrange'
         },
         {
             label: '备注信息',
             type: 'textarea',
             field: 'note'
         }
     ]
 ]
 const SHOW_PAY_BOX = false
 import {mapState, mapMutations, mapActions, mapGetters} from 'vuex'
 import MapService from  'wqr-amap';
 import {Toast} from '@/utils/global'
 import QRCode from 'qrcodejs2'

 export default{
    name: '',
    components: {},
    props: {},
    watch: {},
    computed: {
        ...mapState({
            classifyList: state => state.Index.classifyList,
            isShowImgBox: state => state.Index.canShowImgBox,
            imgCode: state => state.Index.imgCode,
            orderInfo: state => state.Index.orderInfo,
            couponList: state => state.Index.couponList
        }),
        totalMoney(){
            let {compute_fee, distance_fee, distance_start_fee, night_fee, bridge_fee} = this.orderInfo
            let item = this.couponList && this.couponList.find(kk => kk.id == this.form_order.coupon_id)  
                        && this.couponList.find(kk => kk.id == this.form_order.coupon_id).reduce_money
            item = item ? item : 0
            let result = compute_fee + distance_fee + distance_start_fee + night_fee + bridge_fee - item
            return result && result.toFixed(2)
        },
        additional(){
            let {additional_distance} = this.orderInfo
            let result = (additional_distance/1000).toFixed(2)
            if(isNaN(result)) {
                return 0
            }else {
                return result
            }
        },
    },
    data(){
        return {
            CardList,
            MIN_WEIGHT,
            SHOW_PAY_BOX,
            choosedClass: [],
            form_signin: {
                phone: '',
                captcha: '',
                code: ''
            },
            form_order: {
                shipper_address: {
                    adcode: '',
                    Ing: '',
                    lat: '',
                    formatted_address: ''
                },
                recipient_address: {
                    adcode: '',
                    Ing: '',
                    lat: '',
                    formatted_address: ''
                },
                weight: 4,
                coupon_id: '',
                type: 1,
                shipper: '',
                shipper_phone:'',
                recipient: '',
                recipient_phone: '',
                goods_type: ''
            },
            isShowPopover: false,
            isShowBtnLoading: false,
            mapService: null,
            temp_obj: {
                temp_send: '',
                temp_receive: ''
            },
            timer_count: 60,
            dialog_count: 60,
            temp_pay_type: 'zhifubao',
            tokenObj: {},
            qrCode: null,
            visibleDialog: false
        }
    },
    methods: {
        ...mapActions([
            'GetClassifyList', 
            'GetImgCode', 
            'PostMsgCode', 
            'GetPriceInfo', 
            'PostUserLogin', 
            'GetCouponInfo', 
            'PostOrder',
            'GetAlipay',
            'GetWechat'
            ]),
        /**按钮 -- 下一步 
         * 先登录 ， 再付款
          */
        handleClickNext(){
            this.PostUserLogin(this.form_signin).then(res => {
                let local = localStorage
                local.setItem('token', JSON.stringify(res.data))
                let {token} = res.data
                let result_shipper = Object.values(this.form_order.shipper_address).some(kk => kk)
                let result_recipient = Object.values(this.form_order.recipient_address).some(kk => kk)
                if(result_shipper && result_recipient) {
                    this.GetCouponInfo({form: this.form_order, token}).then(res => {
                        this.form_order.coupon_id = this.couponList.slice(0,1)[0].id
                    })
                    this.SHOW_PAY_BOX = true
                }else {
                    Toast({msg: '请选择起点或终点之后', type: 'error'})
                }
            })
        },
        /**
         * 单击按钮事件 -- 选择物品信息
         */
        handleClickChoose(item){
            this.form_order.goods_type = item.vlaue
            this.$set(this.form_order, 'goods_type', item.value)
        },
        /** 切换popover */
        handleClickToggle(){
            // this.isShowPopover = true
            this.GetImgCode().then(res => {
                this.isShowPopover = true
            })
        },
        /**获取短信验证码 */
        handleClickPostMsg(){
            let timer = null
            if(timer) clearInterval(timer)
            if(!this.form_signin.phone) {
                return Toast({msg: '请输入手机号', type: 'error'})
            }else if(!this.form_signin.captcha) {
                return Taost({msg: '请输入图片验证码', type: 'error'})
            }
            this.PostMsgCode(this.form_signin).then(res => {
                this.isShowPopover = false
                this.isShowBtnLoading = true
                timer = setInterval(() => {
                    if(this.timer_count > 0) {
                        this.timer_count --
                    }else {
                        this.isShowBtnLoading = false
                    }
                }, 1000)
            })
        },
        /**处理radio组的change */
        handleRadioChange(type){
          this.temp_pay_type = type == 0 ? 'zhifubao' : 'weixin'
        },
        /**
         * dialog对话框的关闭回调
         */
        dialogBeforeClose(){
            this.visibleDialog = false
        },
        /**
         * 处理input框的change事件
         */
        handleInputChange(string, cb){
            let obj = {
                key: string,
                pageSize: 10,
                pageIndex: 1
            }
            this.mapService.searchByKeyword(obj).then(res => {
                let temp_arr = res.pois.map(kk => ({...kk, value: kk.name}))
                cb(temp_arr)
            })
        },
        /**
         * 选择具体地址之后发起获取价格的请求
         * 对价格重新赋值
         */
        handleSelect(e, item){
            this.mapService.lngLatToAddress([e.location.lng, e.location.lat]).then(res => {
                let _obj = {
                    adcode: res.addressComponent.adcode,
                    lng: e.location.lng,
                    lat: e.location.lat,
                    formatted_address:res.formattedAddress
                }
                if(item.field == 'temp_send') {
                    this.form_order.shipper_address = _obj
                    this.mapService.addMarker([_obj.lng, _obj.lat], '起点')
                }else {
                    this.form_order.recipient_address = _obj
                    this.mapService.addMarker([_obj.lng, _obj.lat], '终点')
                }
                let result_shipper = Object.values(this.form_order.shipper_address).some(kk => kk)
                let result_recipient = Object.values(this.form_order.recipient_address).some(kk => kk)
                if(result_shipper && result_recipient) this.GetPriceInfo(this.form_order)
            })
        },
        /**
         *立即下单
         */
        handleSubmit(){
            let local = localStorage
            let token = local.getItem('token') ? JSON.parse(local.getItem('token')) : {}
            let {shipper_address: {shipper, shipper_phone}, recipient_address: {recipient, recipient_phone}} = this.form_order
            let form = {}
            form = {...this.form_order, shipper, shipper_phone, recipient, recipient_phone}
            this.PostOrder({token: token.token, form}).then(res => {
                switch (this.temp_pay_type) {
                    case 'zhifubao':
                        this.GetAlipay(token.token).then(res => {
                            const div = document.createElement('div')
                            div.innerHTML = res
                            document.body.appendChild(div)
                            document.forms[0].submit()
                            }).catch(err => {
                            //Todo 支付宝调取失败
                        })
                        break
                    case 'weixin':
                        this.visibleDialog = true
                        this.GetWechat(token.token).then(res => {
                            let timer = null
                            if (this.qrCode) {
                                this.qrCode.clear()
                                this.qrCode.makeCode(res.code_url)
                            } else {
                                setTimeout(() => {
                                    this.qrCode = new QRCode(document.getElementById('qrcode'), {
                                        width: 260, //图像宽度
                                        height: 260, //图像高度
                                        colorDark: '#000000', //前景色
                                        colorLight: '#ffffff', //背景色
                                        typeNumber: 4,
                                        correctLevel: QRCode.CorrectLevel.H
                                    })
                                    this.qrCode.makeCode(res.code_url)
                                }, 500)
                               if(timer) clearInterval(timer)
                               timer = setInterval(() => {
                                    if(this.dialog_count > 0) {
                                        this.dialog_count --
                                    }else {
                                        this.dialog_count = 0
                                        this.visibleDialog = false
                                        clearInterval(timer)
                                    }
                                }, 1000)
                            }
                            }).catch(err => {
                        //Todo 微信调取失败
                        })
                        break
                }
            })
        },

        mapInit(){
          let obj = {
            id: 'amap',
            key: '802b75ae5abe1bdddc4a67c1c050ad61',
            mapStyle: {
                zoom: 14,
                resizeEnable: true,
                },
            }
            this.mapService = new MapService(obj)
            this.mapService.initMap().then(() => {
                this.mapService.showLocation()   
            })
        }
    },
    created(){
        let local = localStorage
        this.tokenObj = local.getItem('token') ? local.getItem('token') : ''
        this.tokenObj = this.tokenObj && JSON.parse(this.tokenObj)
        let AMap = local.getItem('_AMap_AMap.CustomLayer')
        this.GetClassifyList()
        this.mapInit()
        return
        if(this.AMap){

        }
        setTimeout(() => {
            this.mapInit()
        }, 1000)
    },
    mixins: []
 }
</script>

<style scoped lang='scss'>
@import '@/assets/style/mixin.scss';
@import '@/assets/style/color.scss';
@include b(page-pay) {
    width: inherit;
    padding: 20px 0;
    background-color: #F7F5F5;
    @include b(pp-card) {
        width: 1200px;
        min-height: 280px;
        margin:0 auto;
        margin-bottom: 20px;
        padding: 20px;
        background-color: #fff;
        border: 1px solid $b-base;
        box-shadow: 0 0 6px 0  rgba(223, 220, 220, .75);
        box-sizing: border-box;

        &:last-of-type {
            margin-bottom: 0;
        }

        @include e(lf) {
            width: 38%;
            height: 100%;
            @include b(form-list) {
                height: 100%;
                @include b(form-item) {
                    height: 10%;
                    line-height: 10%;
                    @include e(btn) {
                        margin-left: 15px;
                        color: #fff;
                        border: none;
                        background-color: #f4b828;
                        @include m(submit) {
                            width: 90%;
                            margin-left:10%;
                        }
                    }
                }
            }
        }
    }
    @include b(form-list) {
        @include flex($dir: column, $align: stretch, $justify: space-between);
        height: 240px;
        padding: 3% 0;
        box-sizing: border-box;
        @include b(form-item) {
            @include flex($dir: row, $align: center);
            width: 90%;
            margin-bottom: 10px;
            @include e(label) {
                display: inline-block;
                min-width: 120px;
                margin-right: 50px;
                word-break: keep-all;
                text-align: right;
                color: #262626;
                font-family: PingFang-SC-Medium;
            }
            
        }
    }

    @include b(checkbox-group) {
        @include flex($dir: row, $align: center, $wrap: wrap);
        min-height: 100px;
        @include e(item) {
            margin-right: 20px;
            @include m(btn) {
                padding: 10px 30px;
                border-radius: 4px;
                font-size: 14px;
                background-color: #ebebeb;
                &:hover {
                    cursor: pointer;
                    background-color: $base;
                    color: #fff;
                    transition: backgroud-color .5s ease;
                }
            }
        }
    }
    .my-input__220 {
        width: 30%;
    }
    .my-input-number__tips{
        padding-left: 10px;
        color: #616161;
    }
    .my-pp-card-500{
        @include flex($dir: row, $align: center, $justify: space-between, $wrap: nowrap);
        height: 500px !important;
    }
}
@include when(danger) {
    color: $danger;
}
@include when(item-active) {
    background-color: $base !important;
    color: #fff;
}
@include b(img-code-box) {
    & > img {
        width: auto;
        max-width: 100px;
        height: auto;
        margin-left: 10px;
        vertical-align: middle;

        &:hover {
            cursor: pointer;
        }
    }
}
@include b(popover-box) {
    @include flex($dir: row);
    width: 200px;
    margin-bottom: 15px;
}
@include b(qrbox) {
    width: 300px;
    height: 300px;
    margin: 0 auto;
    background-color: #fff;
}

@include b(img-box){
    width: 300px;
    margin: 0 auto;
}

@include b(dialog) {
    @include e(header) {
        @include flex($dir: row, $align: center, $justify: flex-end);
        height: 80px;
        @include m(tips) {
            width: 33%;
            text-align: right;
            align-self: flex-start;
        }
        @include m(money) {
            margin-left: 10px;
        }
        @include m(title){
            flex: 1;
            padding-right: 11%;
            text-align: right;
            font-size: 17px;
        }
    }
}
@include b(radiobox-group) {
    @include flex($dir: row, $align: center, $justify: space-between, $wrap: nowrap);
    @include e(item) {
        width: 110px;
        height: 40px;
        border-radius: 4px;
        border:1px solid $t-999;
        background-size: 90% 90%;
        background-repeat: no-repeat;
        background-position: center center;
        &:hover {
            cursor: pointer;
            border: 1px solid $base;

            &:last-of-type {
                border-left: 1px solid $base;
            }
        }
        &:first-of-type {
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
            background-image: url('../../assets/imgs/alipay_s.png');
            background-size: 65% 65%;
        }
        &:last-of-type {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
            border-left: none;
            background-image: url('../../assets/imgs/weixin_g.png');
            background-size: 80% 80%;
        }
    }
}
@include when(pay-group-active) {
    border: 1px solid $base !important;
}
@include b(pp-card-2){
   @include b(form-list) {
       height: 100% !important;
   }
}

</style>